{"version":3,"sources":["Models/FantasyDate.ts","DataClients/fetchHelper.ts","DataClients/CalendarEventDataClient.ts","State/CalendarState.ts","LongPress.jsx","CalendarDay.tsx","MonthView.tsx","Utililty.ts","DayDetail/EventDetail.tsx","DayDetail/DayDetailView.tsx","CalendarView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["datesAreEqual","date1","date2","dayOfMonth","month","year","baseUriAddress","baseAddress","process","endsWith","console","log","getBaseAddress","get","uri","parameters","a","fullUri","getUri","requestInit","method","request","response","post","body","JSON","stringify","headers","fetch","status","isJson","json","responseObj","success","value","myErr","message","undefined","getErrorObject","errorObj","url","params","myUri","Object","keys","filter","key","map","prototype","toString","call","toISOString","encodeURIComponent","join","contentType","indexOf","getUnknownErrorMsg","includes","errors","GetCalendar","id","asCalendar","GetCalendarEvents","asEvents","UpsertEvent","event","newEvent","CalendarState","events","find","x","stillGoodEvents","push","observable","calendar","currentYear","months","weekLength","selectedDay","incrementYear","decrementYear","calendarEventEditId","GetTextCalendar","LongPress","shouldShortPress","moved","state","touch","startTimeout","timeout","setTimeout","longPressed","props","time","onLongPress","cancelTimeout","clearTimeout","onTouchStart","e","onTouchEnd","onPress","onTouchCancel","onMove","onTouchMove","document","createEvent","this","setState","children","disabled","onContextMenu","preventDefault","style","WebkitUserSelect","WebkitTouchCallout","React","cloneElement","Component","defaultProps","CalendarDay","observer","fantasyDate","date","useState","showPopUp","setShowPopup","length","className","onMouseEnter","window","onClick","onMouseLeave","name","MonthView","arr","n","monthNumber","days","Array","from","v","i","weeks","reduce","resultArray","item","index","chunkIndex","Math","floor","week","weekIndex","DayDetailView","setName","description","setDescription","keyCode","ctrlKey","saveEvent","updateEvent","icon","faEdit","split","marginBottom","fontSize","type","onChange","target","onKeyDown","textAreaKeyDown","dayNum","monthName","EventDetail","defaultEdit","calendarId","realDate","CalendarView","myApp","getElementById","Modal","setAppElement","faAngleLeft","faAngleRight","position","isOpen","onRequestClose","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f962694f.chunk.js","sourcesContent":["export default interface FantasyDate{\r\n  year: number;\r\n  month: number;\r\n  dayOfMonth: number;\r\n}\r\n\r\nexport function datesAreEqual(date1: FantasyDate, date2: FantasyDate){\r\n  return (date1.dayOfMonth === date2.dayOfMonth) &&\r\n   (date1.month === date2.month) &&\r\n   (date1.year === date2.year);\r\n}\r\n","const baseUriAddress = getBaseAddress();\r\n\r\n\r\ninterface ErrorObject {\r\n  status: number;\r\n  message: string;\r\n  errors?: string[];\r\n}\r\n\r\ninterface Result {\r\n  success: boolean;\r\n  value: unknown | ErrorObject;\r\n}\r\n\r\nexport async function get(uri: string, parameters?: any): Promise<Result>{\r\n  const fullUri = getUri(baseUriAddress + uri, parameters);\r\n  const requestInit: RequestInit = {\r\n    method: \"GET\",\r\n  };\r\n  const response = await request(fullUri, requestInit);\r\n  return response;\r\n}\r\n\r\nexport async function post(uri: string, body: any): Promise<Result>{\r\n  const fullUri = getUri(baseUriAddress + uri);\r\n  const requestInit: RequestInit = {\r\n    method: \"POST\",\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const response = await request(fullUri, requestInit);\r\n  return response;\r\n}\r\n\r\nasync function request(uri: string, requestInit: RequestInit): Promise<Result> {\r\n  const response = await fetch(uri, requestInit);\r\n\r\n  if (response.status === 200) {\r\n    if (isJson(response)) {\r\n      try {\r\n        const responseObj = await response.json();\r\n        return {\r\n          success: true,\r\n          value: responseObj,\r\n        };\r\n      }\r\n      catch (err) {\r\n        const myErr: ErrorObject = {\r\n          message: \"ERR 1: Something went wrong parsing the Response JSON\",\r\n          status: response.status,\r\n        };\r\n        return {\r\n          success: false,\r\n          value: myErr,\r\n        };\r\n      }\r\n    }\r\n    else {\r\n      return {\r\n        success: true,\r\n        value: undefined,\r\n      };\r\n    }\r\n  }\r\n  else {\r\n    console.log(\"Get the error obj\", response);\r\n    const errorObj = await getErrorObject(response);\r\n    return {\r\n      success: false,\r\n      value: errorObj,\r\n    };\r\n  }\r\n}\r\n\r\n\r\nfunction getUri(url: string, params?: any) {\r\n  let myUri = url;\r\n  if (params) {\r\n    const queryParams = Object.keys(params)\r\n      .filter((key) => {\r\n        return typeof (params[key]) !== \"undefined\" && params[key] !== null;\r\n      })\r\n      .map((key) => {\r\n        let value = params[key];\r\n        if (Object.prototype.toString.call(value) === \"[object Date]\") {\r\n          value = value.toISOString();\r\n        }\r\n        else {\r\n          value = encodeURIComponent(value);\r\n        }\r\n        return encodeURIComponent(key) + \"=\" + value;\r\n      });\r\n    const queryString = queryParams.join(\"&\");\r\n    myUri = myUri + \"?\" + queryString;\r\n  }\r\n  return myUri;\r\n}\r\n\r\nfunction isJson(response: any) {\r\n  const contentType = response.headers.get(\"content-type\");\r\n  if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nasync function getErrorObject(response: Response): Promise<ErrorObject> {\r\n  const contentType = response.headers.get(\"content-type\");\r\n  const errorObj: ErrorObject = {\r\n    message: getUnknownErrorMsg(response.status),\r\n    status: response.status,\r\n  };\r\n  if (contentType && contentType.includes(\"application/json\")) {\r\n    try {\r\n      const json = await response.json();\r\n      errorObj.message = json.message;\r\n      if (json.errors) {\r\n        errorObj.errors = json.errors;\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(\"There was an exception parsing the error object\", response, err);\r\n    }\r\n  }\r\n  return errorObj;\r\n}\r\n\r\nfunction getUnknownErrorMsg(status: number) {\r\n  if (status === 401) {\r\n    return \"There was an unknown error with your request. Please make sure you are logged in.\";\r\n  }\r\n  else {\r\n    return \"There was an unknown error with your request. Status code: \" + status;\r\n  }\r\n}\r\n\r\nfunction getBaseAddress(){\r\n  let baseAddress = process.env.REACT_APP_API_ADDRESS;\r\n  if (!baseAddress){\r\n    console.log(\"YOU MUST ADD THE FUNCTION BASE ADDRESS TO THE ENV FILE!\");\r\n  }\r\n  else if (!baseAddress.endsWith(\"/\")){\r\n    baseAddress += \"/\";\r\n  }\r\n  return baseAddress;\r\n}\r\n","import {get, post} from \"./fetchHelper\";\r\nimport CalendarEvent from \"../Models/CalendarEvent\";\r\nimport {CalendarModel} from \"../Models/CalendarModel\";\r\nimport CalendarState from \"../State/CalendarState\";\r\n\r\n\r\nexport async function GetCalendar(): Promise<CalendarModel | undefined>{\r\n  const response = await get(\"GetCalendar\", {id: \"9a865260-1f8f-11ea-97ed-9555018c1b02\"});\r\n  if (response.success){\r\n    const asCalendar = response.value as CalendarModel;\r\n    if (!asCalendar){\r\n      return undefined;\r\n    }\r\n    return asCalendar;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport async function GetCalendarEvents(id: string): Promise<CalendarEvent[]>{\r\n  const response = await get(\"GetCalendarEvents\", {id});\r\n  if (response.success){\r\n    const asEvents = response.value as CalendarEvent[];\r\n    if (!asEvents){\r\n      return [];\r\n    }\r\n    return asEvents;\r\n  }\r\n  return [];\r\n}\r\n\r\nexport async function UpsertEvent(event: CalendarEvent): Promise<void>{\r\n  const response = await post(\"UpdateEvent\", event);\r\n  console.log(\"NEW EVENT\", response);\r\n  if (response.success){\r\n    const newEvent = response.value as CalendarEvent;\r\n    if (newEvent){\r\n      const oldEvent = CalendarState.events.find(x => x.id === newEvent.id);\r\n      if (!oldEvent){\r\n        CalendarState.events.push(newEvent);\r\n      }\r\n      else{\r\n        const stillGoodEvents = CalendarState.events.filter(x => x.id !== newEvent.id);\r\n        CalendarState.events = [newEvent, ...stillGoodEvents];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {observable} from \"mobx\";\r\nimport CalendarEvent from \"../Models/CalendarEvent\";\r\nimport FantasyDate from \"../Models/FantasyDate\";\r\nimport { GetCalendar, GetCalendarEvents } from \"../DataClients/CalendarEventDataClient\";\r\nimport {CalendarModel} from \"../Models/CalendarModel\";\r\n\r\ninterface ICalendarState {\r\n  calendar: CalendarModel;\r\n  currentYear: number;\r\n  selectedDay: FantasyDate | undefined;\r\n  events: CalendarEvent[];\r\n  incrementYear: () => void;\r\n  decrementYear: () => void;\r\n  calendarEventEditId: string;\r\n}\r\n\r\nconst blankModel: CalendarModel = {\r\n  id: \"__BLANK__\",\r\n  currentYear: -1,\r\n  months: [],\r\n  weekLength: 7,\r\n};\r\n\r\nconst CalendarState = observable<ICalendarState>({\r\n  calendar: blankModel,\r\n  currentYear: -1,\r\n  selectedDay: undefined,\r\n  events: [],\r\n  incrementYear: () => CalendarState.currentYear++,\r\n  decrementYear: () => CalendarState.currentYear--,\r\n  calendarEventEditId: \"\",\r\n\r\n});\r\n\r\nasync function GetTextCalendar() {\r\n  const calendar = await GetCalendar();\r\n  if (calendar){\r\n    CalendarState.calendar = calendar;\r\n    if (CalendarState.currentYear === -1){\r\n      CalendarState.currentYear = calendar.currentYear;\r\n    }\r\n    const events = await GetCalendarEvents(calendar.id);\r\n    console.log(\"MY EVENTS\", events);\r\n    CalendarState.events = events;\r\n  }  \r\n}\r\n\r\nGetTextCalendar();\r\n\r\nexport default CalendarState;\r\n","import React, {Component} from 'react';\r\n\r\nclass LongPress extends Component {\r\n  shouldShortPress = true;\r\n  moved = false;\r\n\r\n  state = {\r\n    touch: true\r\n  };\r\n\r\n  static defaultProps = {\r\n    time: 500\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      document.createEvent('TouchEvent');\r\n    } catch (e) {\r\n      // touch is not available, disable handlers\r\n      this.setState({touch: false});\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.cancelTimeout();\r\n  }\r\n\r\n  startTimeout = () => {\r\n    this.timeout = setTimeout(this.longPressed, this.props.time);\r\n  };\r\n\r\n  longPressed = () => {\r\n    this.shouldShortPress = false;\r\n    if (this.props.onLongPress && this.moved === false) {\r\n      this.props.onLongPress();\r\n    }\r\n  };\r\n\r\n  cancelTimeout = () => {\r\n    clearTimeout(this.timeout);\r\n  };\r\n\r\n  onTouchStart = e => {\r\n    this.shouldShortPress = true;\r\n    this.moved = false;\r\n    this.startTimeout();\r\n    if (typeof this.props.onTouchStart === 'function') {\r\n      this.props.onTouchStart(e);\r\n    }\r\n  };\r\n\r\n  onTouchEnd = e => {\r\n    this.cancelTimeout();\r\n    if (this.props.onPress && this.shouldShortPress && this.moved === false) {\r\n      this.props.onPress();\r\n    }\r\n    if (typeof this.props.onTouchEnd === 'function') {\r\n      this.props.onTouchEnd(e);\r\n    }\r\n  };\r\n\r\n  onTouchCancel = e => {\r\n    this.cancelTimeout();\r\n    if (typeof this.props.onTouchCancel === 'function') {\r\n      this.props.onTouchCancel(e);\r\n    }\r\n  };\r\n\r\n  onMove = e => {\r\n    this.moved = true;\r\n    if (typeof this.props.onTouchMove === 'function') {\r\n      this.props.onTouchMove(e);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {children, disabled} = this.props;\r\n    const {touch} = this.state;\r\n\r\n    if (!touch || disabled) {\r\n      return children;\r\n    }\r\n\r\n    const props = {\r\n      onContextMenu: e => e.preventDefault(),\r\n      onTouchStart: this.onTouchStart,\r\n      onTouchEnd: this.onTouchEnd,\r\n      onTouchMove: this.onMove,\r\n      onTouchCancel: this.onTouchCancel,\r\n      style: {\r\n        ...children.props.style,\r\n        WebkitUserSelect: 'none',\r\n        WebkitTouchCallout: 'none'\r\n      }\r\n    };\r\n\r\n    return React.cloneElement(children, {...children.props, ...props});\r\n  }\r\n}\r\n\r\nexport default LongPress;","import React, { useState } from \"react\";\r\nimport FantasyDate, { datesAreEqual } from \"./Models/FantasyDate\";\r\nimport { observer } from \"mobx-react\";\r\nimport CalendarState from \"./State/CalendarState\";\r\nimport LongPress from \"./LongPress\";\r\n\r\nconst CalendarDay = observer((props: { date: FantasyDate }) => {\r\n  const events = CalendarState.events.filter(x => datesAreEqual(x.fantasyDate, props.date));\r\n  const [showPopUp, setShowPopup] = useState(false);\r\n  let timeout: number = -1;\r\n  function onHover() {\r\n    timeout = window.setTimeout(() => {\r\n      if (timeout > 0) {\r\n        clearTimeout(timeout);\r\n      }\r\n      setShowPopup(true);\r\n    }, (100));\r\n  }\r\n  function onLeave() {\r\n    clearTimeout(timeout);\r\n    setShowPopup(false);\r\n  }\r\n  const style = events.length === 0 ? \"day\" : \"day has-events\";\r\n  return (\r\n    <LongPress \r\n        time={500} \r\n        onPress={() => setShowPopup(false)} \r\n        onLongPress={() => setShowPopup(true)}>\r\n      <div className={style}\r\n        onMouseEnter={onHover}\r\n        onClick={() => CalendarState.selectedDay = props.date}\r\n        onMouseLeave={onLeave}>\r\n        <div>{props.date.dayOfMonth}</div>\r\n        <div className={showPopUp && events.length ? \"day-events\" : \"hide\"}>\r\n          {\r\n            events.map(x => <div key={x.id}>{x.name}</div>)\r\n          }\r\n        </div>\r\n      </div>\r\n    </LongPress>\r\n  );\r\n});\r\n\r\nexport default CalendarDay;\r\n\r\n","import React from \"react\";\r\nimport CalendarDay from \"./CalendarDay\";\r\nimport chunks from \"./Utililty\";\r\nimport FantasyDate from \"./Models/FantasyDate\";\r\nimport { observer } from \"mobx-react\";\r\nimport CalendarState from \"./State/CalendarState\";\r\n\r\nconst MonthView = observer((props: { monthNumber: number }) => {\r\n  const month = CalendarState.calendar.months[props.monthNumber - 1];\r\n  const days = Array.from({ length: month.days }, (v, i) => i + 1);\r\n  const weeks = chunks(days, CalendarState.calendar.weekLength);\r\n  return (\r\n    <div className=\"month\">\r\n      <div>{month.name}</div>\r\n      <div className=\"month-days\">\r\n        {\r\n          weeks.map((week, weekIndex) => (\r\n            <div key={weekIndex} className=\"week\">\r\n              {week.map((x, i) => {\r\n                const fantasyDate: FantasyDate = { \r\n                  year: CalendarState.currentYear, \r\n                  dayOfMonth: x, \r\n                  month: props.monthNumber} ;\r\n                return <CalendarDay key={i} date={fantasyDate} />;\r\n              })}\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MonthView;\r\n","export default function chunks<T>(arr: T[], n: number): T[][] {\r\n\r\n  const start: T[][] = [];\r\n\r\n  const result = arr.reduce((resultArray, item, index) => {\r\n    const chunkIndex = Math.floor(index / n);\r\n\r\n    if (!resultArray[chunkIndex]) {\r\n      resultArray[chunkIndex] = []; // start a new chunk\r\n    }\r\n\r\n    resultArray[chunkIndex].push(item);\r\n\r\n    return resultArray;\r\n  }, start);\r\n\r\n  return result;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport \"./DayDetail.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport CalendarEvent from \"../Models/CalendarEvent\";\r\nimport {UpsertEvent} from \"../DataClients/CalendarEventDataClient\";\r\nimport CalendarState from \"../State/CalendarState\";\r\n\r\nconst DayDetailView = observer((props: {event: CalendarEvent, defaultEdit: boolean}) => {\r\n  const [name, setName] = useState(props.event.name);\r\n  const [description, setDescription] = useState(props.event.description);\r\n  async function textAreaKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>){\r\n    if (e.keyCode === 13 && e.ctrlKey){\r\n      saveEvent();\r\n    }\r\n  }\r\n  async function saveEvent(){\r\n    CalendarState.calendarEventEditId = \"\";\r\n    const updateEvent: CalendarEvent = {\r\n      ...props.event,\r\n      name,\r\n      description,\r\n    };\r\n    await UpsertEvent(updateEvent);\r\n  }\r\n  function startEdit(){\r\n    CalendarState.calendarEventEditId = props.event.id;\r\n  }\r\n  if (CalendarState.calendarEventEditId !== props.event.id){\r\n    return (\r\n      <div>\r\n        <h3>\r\n          {name}&nbsp;\r\n          <FontAwesomeIcon icon={faEdit} onClick={() => startEdit()} />\r\n        </h3>\r\n        <div className=\"event-description\">\r\n          {\r\n            description.split(\"\\n\").map((x, i) => (<div style={{marginBottom: 5}} key={i}>{x}</div>))\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else{\r\n    return (\r\n      <div className=\"edit-event-area\">\r\n        <div>\r\n          <input style={{fontSize: 18}} type=\"string\" value={name} onChange={(e) => setName(e.target.value)} />\r\n        </div>\r\n        <textarea \r\n          value={description} \r\n          onKeyDown={(e) => textAreaKeyDown(e) } \r\n          onChange={(e) => setDescription(e.target.value)}/>\r\n        <button onClick={() => saveEvent()}>Save</button>\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nexport default DayDetailView;\r\n\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport FantasyDate, {datesAreEqual} from \"../Models/FantasyDate\";\r\nimport CalendarState from \"../State/CalendarState\";\r\nimport \"./DayDetail.css\";\r\nimport EventDetail from \"./EventDetail\";\r\n\r\n\r\nconst DayDetailView = observer((props: {date: FantasyDate}) => {\r\n  const monthName = CalendarState.calendar.months[props.date.month - 1].name;\r\n  const events = CalendarState.events.filter(x => datesAreEqual(props.date, x.fantasyDate));\r\n  function addNewEvent(){\r\n    CalendarState.events.push({\r\n      calendarId: CalendarState.calendar.id,\r\n      fantasyDate: props.date,\r\n      name: \"Title\",\r\n      description: \"\",\r\n      realDate: undefined,\r\n      id: \"\",\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"day-detail\">\r\n      <h2>{`${monthName} ${getDayString(props.date.dayOfMonth)}, ${props.date.year}`}</h2>\r\n      <div>\r\n        {\r\n        events.map(x => (\r\n          <div key={x.id}>\r\n            <EventDetail defaultEdit={!x.id} event={x} />\r\n          </div>\r\n        ))\r\n        }\r\n      </div>\r\n      {\r\n        !CalendarState.calendarEventEditId && (\r\n        <button onClick={() => addNewEvent()} className=\"add-event-button\">\r\n          <span>Add New Event</span>\r\n        </button>)\r\n      }\r\n    </div>\r\n  );\r\n});\r\n\r\nfunction getDayString(dayNum: number){\r\n  if (dayNum === 1){\r\n    return \"1st\";\r\n  }\r\n  else if (dayNum === 2){\r\n    return \"2nd\";\r\n  }\r\n  else if (dayNum === 3){\r\n    return \"3rd\";\r\n  }\r\n  else{\r\n    return dayNum + \"th\";\r\n  }\r\n}\r\n\r\nexport default DayDetailView;\r\n\r\n","import React from \"react\";\r\nimport MonthView from \"./MonthView\";\r\nimport { observer } from \"mobx-react\";\r\nimport CalendarState from \"./State/CalendarState\";\r\nimport Modal from \"react-modal\";\r\nimport DayDetailView from \"./DayDetail/DayDetailView\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst CalendarView = observer(() => {\r\n  const myApp = document.getElementById(\"calendar\");\r\n  if (myApp) {\r\n    Modal.setAppElement(myApp);\r\n  }\r\n  function onModalClose(){\r\n    CalendarState.selectedDay = undefined;\r\n    CalendarState.calendarEventEditId = \"\";\r\n  }\r\n  return (\r\n    <div className=\"calendar\" id=\"calendar\">\r\n      <div className=\"year-header\">\r\n        <FontAwesomeIcon icon={faAngleLeft} onClick={() => CalendarState.decrementYear()} />\r\n        <span className=\"year-number\">{CalendarState.currentYear}</span>\r\n        <FontAwesomeIcon icon={faAngleRight} onClick={() => CalendarState.incrementYear()}/>\r\n      </div>\r\n      <div className=\"calendar-months\">\r\n        {\r\n          CalendarState.calendar.months.map(x =>\r\n            <MonthView key={x.position} monthNumber={x.position} />,\r\n          )\r\n        }\r\n      </div>\r\n      {\r\n        CalendarState.selectedDay && (\r\n          <Modal\r\n            className=\"event-modal\"\r\n            isOpen={!!CalendarState.selectedDay}\r\n            onRequestClose={() => onModalClose()}>\r\n            <DayDetailView date={CalendarState.selectedDay} />\r\n          </Modal>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default CalendarView;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport CalendarView from \"./CalendarView\";\r\nimport { observer } from \"mobx-react\";\r\nimport CalendarState from \"./State/CalendarState\";\r\n\r\nconst App: React.FC = observer(() => {\r\n  if (CalendarState.calendar.id === \"__BLANK__\"){\r\n    return (\r\n      <div>Loading...</div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"App\" id=\"app\">\r\n      <div className=\"content\"><CalendarView/></div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}